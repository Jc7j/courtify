
### **Project Overview**

**Courtify** is a **court rental booking system** tailored for sports facilities, particularly volleyball courts. The platform provides a **company-specific booking experience** with dynamic branding, court management, customizable pricing, and an admin dashboard. Key components include:
- **Admin Dashboard**: For court availability, pricing management, and user analytics.
- **Customer Booking Flow**: Allows users (guests who don't need to have an account) to view available courts, select booking times, and complete payments.

---

### **Foundational Rules**

1. **Tech Stack**:
   - **Frontend**: Next.js 15, TypeScript, TailwindCSS for styling.
   - **State Management**: Apollo Client (GraphQL) and React Context for client-side state. Supabase for server-side state.
   - **Backend and Database**: Supabase with PostgreSQL, using GraphQL as the API layer.
   - **Authentication**: NextAuth.js and Supabase Auth for secure user and admin access.
   - **Payment Processing**: Stripe for handling transactions.
   - **Accessibility**: React Aria for accessible components and navigation.
   - **Email**: Resend for sending emails.

2. **Key Considerations**:
   - **Performance**: Optimize for real-time updates and minimal latency.
   - **Scalability**: Support multiple companies with isolated data and settings.
   - **Accessibility**: Ensure all user interactions are accessible with ARIA labels and keyboard navigation.
   - **Data Privacy**: Role-based access to sensitive data and secure user sessions.
   - **Multi-Tenancy**: Each company has unique configurations, branding, and booking policies.

3. **Coding Guidelines**:
   - **TypeScript**: Use TypeScript for all files, with strict types for data models, API interactions, and components.
   - **Code Structure**:
     - **Components**: Modularize reusable components, particularly for admin and booking interfaces.
     - **Context and State Management**: Use React Context for global state and Apollo Client for GraphQL cache management. Supabase for server-side state.
     - **Error Handling**: Implement error boundaries and clear messaging for user-facing errors.
   - **File Naming and Structure**:
     - Follow Next.js 15 app router conventions 

4. **Testing Requirements**:
   - **Unit Testing**: Use Jest and Testing Library for component and API testing.
   - **End-to-End Testing**: Use Cypress to test the full booking flow and admin operations.
   - **Performance Testing**: Ensure minimal load times for critical pages (admin dashboard, booking selection).
   - **Stripe Testing**: Use Stripe's testing tools to simulate payments and refunds.

---

### **Development Goals for Courtify**
- **Simplicity and Usability**: Provide a seamless booking experience with a clear, intuitive design.
- **Scalability and Flexibility**: Support multiple companies with independent configurations.
- **Accessibility and Inclusivity**: Ensure accessibility for all users, meeting WCAG standards.
- **Data Security and Privacy**: Prioritize user and company data privacy with secure authentication and access control.

---
### **Design System Documentation**

#### 1. Color System
Our color system uses HSL values through CSS variables, providing consistent theming across light and dark modes.

##### Brand Colors
- **Primary (Indigo)**: `#6366F1` - Main brand color, used for CTAs and key actions
  - Light mode: HSL(239 84% 67%)
  - Dark mode: Maintains consistency for brand recognition

##### Semantic Colors
- **Success**: Used for confirmations, successful bookings
- **Warning**: Used for important notices, booking conflicts
- **Destructive**: Used for errors, cancellations
- **Info**: Matches primary, used for informational messages

##### UI Colors
- **Background**: Page and component backgrounds
- **Foreground**: Text and content colors
- **Border**: Component borders and dividers
- **Ring**: Focus states and outlines
- **Muted**: Subtle text and backgrounds
- **Accent**: Hover states and highlights

#### 2. Spacing & Layout
- Border radius: Consistent `--radius` variable (0.5rem)
- Component sizing: Consistent scales (xs, sm, md, lg, xl)
- Spacing: Following Tailwind's spacing scale

#### 3. Dark Mode
Automatic dark mode support using `data-theme="dark"` attribute:
- Maintains brand colors
- Adjusts contrast for readability
- Preserves component hierarchy

#### 4. Accessibility
- ARIA labels and roles
- Keyboard navigation
- Focus states with visible rings
- Color contrast compliance

#### 5. Usage Guidelines
- Use primary buttons for main actions (Book, Create, Submit)
- Use secondary/outline for supporting actions
- Maintain consistent spacing and typography
- Follow semantic color usage for clear user feedback
- Ensure proper contrast in both light and dark modes

This design system supports Courtify's goals of:
- Professional and modern appearance
- Clear user feedback and states
- Consistent booking experience
- Accessible interface for all users

---

### Technical Documentation

#### 1. User Signup Flow
- User initiates signup through `/signup` page
- `useAuth` hook handles user creation in Supabase
- NextAuth creates session and manages authentication state

#### 2. Company Creation Flow
- After signup, user is prompted to create company
- `useCompany` hook manages company creation logic
- GraphQL mutation `CREATE_COMPANY` executes with auth headers

